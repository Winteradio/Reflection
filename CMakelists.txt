cmake_minimum_required(VERSION 3.20)
project(ReflectionProject LANGUAGES CXX)

# ------ Create the library ------ #
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Library.cmake)

option(BUILD_SHARED_LIBS "Build a shared library instead of a static one" ON)

set(MAIN_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(HEADER_DIR ${MAIN_DIR}/include)
set(SOURCE_DIR ${MAIN_DIR}/src)

set(INCLUDE_DIR_LIST
    ${MAIN_DIR}/include
)

set(HEADER_LIST
    ${HEADER_DIR}/Reflection.h
    ${HEADER_DIR}/Utils.h

    ${HEADER_DIR}/Method/MethodCall.h
    ${HEADER_DIR}/Method/MethodInfo.h
    ${HEADER_DIR}/Method/MethodMacro.h

    ${HEADER_DIR}/Property/PropertyInfo.h
    ${HEADER_DIR}/Property/PropertyMacro.h

    ${HEADER_DIR}/Type/TypeCast.h
    ${HEADER_DIR}/Type/TypeInfo.h
    ${HEADER_DIR}/Type/TypeMacro.h
    ${HEADER_DIR}/Type/TypeManager.h
)

set(SOURCE_LIST
    ${SOURCE_DIR}/Method/MethodInfo.cpp

    ${SOURCE_DIR}/Property/PropertyInfo.cpp

    ${SOURCE_DIR}/Type/TypeCast.cpp
    ${SOURCE_DIR}/Type/TypeInfo.cpp
    ${SOURCE_DIR}/Type/TypeManager.cpp
)

create_library(
    SHARED_LIBRARY ${BUILD_SHARED_LIBS}
    TARGET_NAME ${PROJECT_NAME}
    PUBLIC_HEADERS ${HEADER_LIST}
    PRIVATE_SOURCES ${SOURCE_LIST}
)

install_library(
    TARGET_NAME ${PROJECT_NAME}
    PUBLIC_HEADERS ${HEADER_LIST}
    PUBLIC_INCLUDE_DIRS ${INCLUDE_DIR_LIST}
)

# ------ Set the project options ------ #
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Project.cmake)

project_options()

# ------ Create the Demofile ------ #
option(BUILD_DEMO_FILE "Build the demo file" ON)

if (BUILD_DEMO_FILE)
    message(STATUS "# Create the demofile project")

    if (BUILD_SHARED_LIBS)
        set(EXTDEMOFILE_DIR ${MAIN_DIR}/externaldemofile)

        add_subdirectory(${EXTDEMOFILE_DIR})
    else()
        set(DEMOFILE_DIR ${MAIN_DIR}/demofile)
        
        add_subdirectory(${DEMOFILE_DIR})
    endif()
endif()