cmake_minimum_required(VERSION 3.20)
project(ReflectionProject LANGUAGES CXX)

# ------ Include the cmake modules ------ #
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Project.cmake)

project_options()

# ------ Create the library ------ #
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Library.cmake)

option(BUILD_SHARED_LIBS "Build a shared library instead of a static one" ON)

set(MAIN_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(METHOD_REFLECTION_DIR ${MAIN_DIR}/MethodReflection)
set(PROPERTY_REFLECTION_DIR ${MAIN_DIR}/PropertyReflection)
set(TYPE_REFLECTION_DIR ${MAIN_DIR}/TypeReflection)

set(INCLUDE_DIR_LIST
    ${METHOD_REFLECTION_DIR}
    ${PROPERTY_REFLECTION_DIR}
    ${TYPE_REFLECTION_DIR}
)

set(HEADER_LIST
    ${METHOD_REFLECTION_DIR}/MethodMacro.h
    ${METHOD_REFLECTION_DIR}/MethodInfo.h

    ${PROPERTY_REFLECTION_DIR}/PropertyMacro.h
    ${PROPERTY_REFLECTION_DIR}/PropertyInfo.h

    ${TYPE_REFLECTION_DIR}/TypeMacro.h
    ${TYPE_REFLECTION_DIR}/TypeCast.h
    ${TYPE_REFLECTION_DIR}/TypeUtils.h
    ${TYPE_REFLECTION_DIR}/TypeInfo.h
    ${TYPE_REFLECTION_DIR}/TypeManager.h
)

set(SOURCE_LIST
    ${TYPEREFLECTION_DIR}/TypeUtils.cpp
    ${TYPEREFLECTION_DIR}/TypeInfo.cpp
    ${TYPEREFLECTION_DIR}/TypeManager.cpp
)

create_library(
    SHARED_LIBRARY ${BUILD_SHARED_LIBS}
    TARGET_NAME ${PROJECT_NAME}
    PUBLIC_HEADERS ${HEADER_LIST}
    PRIVATE_SOURCES ${SOURCE_LIST}
)

install_library(
    TARGET_NAME ${PROJECT_NAME}
    PUBLIC_HEADERS ${HEADER_LIST}
    PUBLIC_INCLUDE_DIRS ${INCLUDE_DIR_LIST}
)

# ------ Create the Demofile ------ #
option(BUILD_DEMO_FILE "Build the demo file" ON)

if (BUILD_DEMO_FILE)
    message(STATUS "# Create the demofile project")

    if (BUILD_SHARED_LIBS)
        set(EXTDEMOFILE_DIR ${MAIN_DIR}/externaldemofile)

        add_subdirectory(${EXTDEMOFILE_DIR})
    else()
        set(DEMOFILE_DIR ${MAIN_DIR}/demofile)
        
        add_subdirectory(${DEMOFILE_DIR})
    endif()
endif()